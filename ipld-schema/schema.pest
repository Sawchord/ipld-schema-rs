file = { SOI ~ ((type | comment) ~ multispace*)+ ~ EOI }

comment_line = { whitespace* ~ "#" ~ whitespace* ~ comment_line_content ~ (newline*) }
// TODO: Fix the values that can be contained
comment_line_content = { ('A'..'Z' | 'a'..'z' | "'" | whitespace)* }
comment              = { comment_line+ }

type      = { "type" ~ whitespace+ ~ type_name ~ whitespace+ ~ type_def }
type_name = { ('A' .. 'Z') ~ ('A' .. 'Z' | 'a' .. 'z' | '0'..'9' | "_")+ }
type_def  = {
    "bool"
  | "string"
  | "int"
  | "float"
  | "any"
  | "bytes"
  | list_def
  | map_def
  | struct_def
  | enum_def
  | link_def
  | unit_def
}

inline_type_def = { type_name | list_def | map_def | link_def }

list_def      = { "[" ~ whitespace* ~ list_nullable? ~ inline_type_def ~ whitespace* ~ "]" }
list_nullable = { "nullable" ~ whitespace* }

map_def        = { "{" ~ whitespace* ~ type_name ~ whitespace* ~ ":" ~ whitespace* ~ map_nullable? ~ inline_type_def ~ whitespace* ~ "}" ~ (whitespace+ ~ map_repr)? }
map_nullable   = { "nullable" ~ whitespace* }
map_repr       = { "representation" ~ whitespace+ ~ map_repr_value }
map_repr_value = { "map" | "listpairs" | stringpairs_repr }

struct_def                 = { "struct" ~ whitespace* ~ "{" ~ struct_field* ~ multispace* ~ "}" ~ (whitespace* ~ struct_repr)? }
struct_field               = { multispace* ~ (comment)? ~ whitespace* ~ struct_field_name ~ whitespace+ ~ struct_nullable? ~ struct_optional? ~ inline_type_def ~ struct_field_repr? ~ multispace* }
struct_field_name          = { ('A' .. 'Z' | 'a' .. 'z' | '0'..'9' | "_")+ }
struct_nullable            = { "nullable" ~ whitespace* }
struct_optional            = { "optional" ~ whitespace* }
struct_field_repr          = { whitespace* ~ "(" ~ struct_field_repr_rename? ~ struct_field_repr_implicit? ~ ")" }
struct_field_repr_rename   = { "rename" ~ whitespace+ ~ "\"" ~ struct_field_name ~ "\"" ~ whitespace* }
struct_field_repr_implicit = { "implicit" ~ whitespace+ ~ "\"" ~ struct_field_name ~ "\"" ~ whitespace* }
struct_repr                = { "representation" ~ whitespace+ ~ struct_repr_value }
struct_repr_value          = { "map" | "listpairs" | stringpairs_repr }

enum_def              = { "enum" ~ whitespace* ~ "{" ~ enum_field+ ~ multispace* ~ "}" ~ (whitespace* ~ enum_repr)? }
enum_field            = { multispace* ~ (comment)? ~ whitespace* ~ "|" ~ whitespace* ~ type_name ~ (whitespace+ ~ enum_field_repr)? }
enum_field_repr       = { "(\"" ~ enum_field_repr_value ~ "\")" }
enum_field_repr_value = { (('A' .. 'Z') ~ ('A' .. 'Z' | 'a' .. 'z' | '0'..'9' | "_")* | ('0'..'9')*) }
enum_repr             = { "representation" ~ whitespace+ ~ enum_repr_value }
enum_repr_value       = { "int" | "string" }

link_def = { "&" ~ whitespace* ~ type_name }

unit_def  = { "unit" ~ whitespace+ ~ "representation" ~ whitespace+ ~ unit_repr }
unit_repr = { "null" | "true" | "false" | "emptymap" }

stringpairs_repr         = { "stringpairs" ~ whitespace* ~ "{" ~ stringpairs_repr_content ~ multispace* ~ "}" }
stringpairs_repr_content = { multispace* ~ stringpairs_repr_inner ~ multispace* ~ stringpairs_repr_entry }
stringpairs_repr_inner   = { "innerDelim" ~ whitespace+ ~ "\"" ~ stringpairs_repr_value ~ "\"" }
stringpairs_repr_entry   = { "entryDelim" ~ whitespace+ ~ "\"" ~ stringpairs_repr_value ~ "\"" }
// TODO: Fix this to use actually all characters
stringpairs_repr_value = { ('A' .. 'Z' | 'a' .. 'z' | '0'..'9' | "_" | "=" | ",")* }

multispace = _{ newline | whitespace }
newline    = _{ "\n" | "\r\n" }
whitespace = _{ " " | "\t" }
